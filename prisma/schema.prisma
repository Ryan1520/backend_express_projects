// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique
  username  String      @unique
  password  String
  age       Int
  avatarUrl String?
  createdAt DateTime    @default(now())
  posts     Post[]
  savedPost SavedPost[]
  chat      Chat[]      @relation("ChatUsers")
  seenChats Chat[]      @relation("ChatSeenBy")
}

model Post {
  id         String      @id @default(uuid())
  title      String
  price      Int
  address    String
  city       String
  bedrooms   Int
  bathrooms  Int
  latitude   String
  longitude  String
  type       String
  property   Property
  createdAt  DateTime    @default(now())
  images     Image[]
  postDetail PostDetail?
  savedPost  SavedPost[]
  user       User?       @relation(fields: [userId], references: [id])
  userId     String?
}

model PostDetail {
  id         String  @id @default(uuid())
  desc       String
  utilities  String
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  post       Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String  @unique
}

model SavedPost {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Image {
  id     String @id @default(uuid())
  url    String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

enum Property {
  HOUSE
  APARTMENT
  CONDO
  TOWNHOUSE
  LAND
}

model Chat {
  id          String    @id @default(uuid())
  users       User[]    @relation("ChatUsers")
  seenBy      User[]    @relation("ChatSeenBy")
  createdAt   DateTime  @default(now())
  messages    Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(uuid())
  text      String
  userId    String
  chat      Chat?    @relation(fields: [chatId], references: [id])
  chatId    String?
  createdAt DateTime @default(now())
}
